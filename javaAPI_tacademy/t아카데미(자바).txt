전혜영, OOPSW@tistory.com
아키텍처와 디자인패턴 고급수준 - 고급과정 디자인패턴 신청

타이핑하는 이유 메모, 순서 메모해서 소스 그 순서대로 실행
찾아보라고 알려주시는 것 찾아보기, 구글에서
소스는 제공

API를 사용하는 이유,봐야하는 이유.
API를 만드는 방법이 최종 목적, API습득에 포커싱
application programming interface 
(용어는 환경의 영향을 받아서 사용됨, 어디서부터 시작하는 언어인지파악하면 다양한 상황에서 사용 파악 가능)
application = sw(소스), program=목적이 있는 것, interface = 기준, 틀, 소통(식별자) - 적절히 조금씩 변형하여 사용가능
PL프로그래밍랭귀지의 공통점 : 
	자료형(기본형/사용자정의형:객체)-값,언어마다 용도가 다름, 종류별로 편의에 대한 기준을 파악하는 것이 중요
	조건문/반복문-일을 하기 위한 것
프로그램은 유연성, 이식성이 필요하다.  실제 프로그래밍은 인문학방식으로 접근해야한다.
sw이론은 수학과 경영 이론에서 많이 나온다. (잡스는 마케팅전문가에 가깝지, 개발도 하지만)
sw는 사람을 이롭게 하기위한거라 경영,통계 아이디어에서 출발한 것이지만, 풀이과정은 공대에서 실행.
	소프트웨어공학이 이를 설명하는 학문.
	개발방법론 공부가 필요. 이론이 나오면 기술이 발전. 구글같은 api를 못만드는 이유(공돌이가 아니라 유연하고 다양한 사고가 필요, 혼자의 경험이아니라 여러사람의 경험이 필요)
		왜 사람들이 좋아할까를 이해. 포켓몬고와 한국소비자의 특징
		1. IT서비스 환경의 변화 
		2. 사용자 : 일반사용자, 개발자
			리눅스, 커널라이브러리(자바api), os, 자바api, 안드로이드프레임워크api
			구글은 다른개발자가 만든 api에 부족한부분을 채우는 게 많음( sw서비스는 new보다 update ), 
			단점과 부족한부분을 찾아서 추가로 개발
	객체의 핵심은 유지보수의 효율성, 재사용보다. 이식성이 중요.
	객체의 특성은 추상화, 캡슐화, 상속, overloading&overriding, 다형성(☆)
		자바 개발자가 새로운 기술을 배우기 위해 수업을 듣는 것 보다, 새로운 api를 테스트해서 스스로 사용할수 있어야함.(공부방법을 알면 가능)
--여기까지가 123p까지의 수업 목표
Collection : 자바 메모리관련 api, 자료구조 관련된 api(이걸 이용해서 프로그래밍, 만드는게 아니라!)
	그릇을 만드는 사람이 될 건가, 쓰는 사람이 될 건가. 중첩문/반복문 사용 최소화, 코드 길이 짧음. 다형성을 기반으로 코딩이 아니라
추상화 : 업무 분석설계해서 관련api를 찾는 것. 
(이론을 가지고 한번은 그릇을 빚는 것이 필요하니까 실제 코딩을 해봄 - 손근육을 키우고 아이디어를 내는 것)
자료구조를 기반으로 프로그래밍을 하는 것은 이론을 이해하는 것 - 전공자와 비전공자의 차이, 비전공자는 api응용력이 떨어짐.
사고력관점에서 비전공자가 잘한다고 생각, 단위기술과 단위용어에는 전공자가 강함 - 일반적인 소프트웨어는 비전공자가 유리, 전공자가 책을 읽어야하는 이유
추상화가 제대로 되어야 그 이후가 가능. 추상화는 목적으로 이어지는 것.
처음부터 추상화를 잘할 수 없다. 목적에 맞는 api를 쓰다보면 api를 잘만들 수 있게됨(추상화를 잘 할 수 있게 됨)
모든프로그램에 들어가는 api를 공부하면서 연습 : (설계도UML을 이용해)구조를 파악하고, api를 왜 이렇게 만들었을까 파악
프로그램을 잘하는 사람 : 
	결과를 내야하고, 공식적으로 사용되는 api는 테스트해놓은 코드(문제점을 찾아서 apring framework에서 공유)를 이용하면 완성도 높음.
	오류를 빨리 찾는 사람, 기능오류보다는 비기능적인 요구사항과 보안이슈에서 문제발생 - 예외처리
		api를 만드는 중요한 노하우, 문제점이 생길수 있는 부분을 예외클래스로 처리해 알려놓은 것.
		유럽이나 미국은 기능적인 이슈보다 비기능적인 이슈먼저 분석해서 예외클래스가 먼저 처리됨.
		ddms? 안드로이드에서 성능좋은 프로그램을 만들기 위한 것. 디바이스오류 외에 네트워크나 프레임워크관련 오류는 개발자가 ddms를 모니터링해서 처리해야함. 예외처리
Exception : 세련된 프로그램을 하기위한 api,
	 프레임워크기반 프로그래밍이라 몰라도 지장없으나, 알면 효과적으로 프로그래밍 가능.
	예외처리는 try catch외에도 기준이 있음.

44p. 소프트웨어 개발방법론 - api를 잘 만드는 방법을 기준으로 설명할 것.
헤드퍼스트 책은 전부 uml그림으로 구성되어있음. UML의 클래스다이어그램(설계도, 메인은 아님)

IO패키지 - 네트워크와 로컬위에서 사용 , 안드로이드는 보안이취약해서? 에서는 코어기술인 io를 활용해 네트워크를 많이함.
쓰레드 - 라이프사이클의 관계가 굉장히 밀접.
	프로그래밍배울 때, 단위기술과 라이프사이클을 배움. 스레드를 이해하고, 라이프사이프 이해가 쉬움.
프레임웤, 솔루션팀에서는 위 두개가 굉장히 중요.
일반 프로그램 개발에서는 라이프사이클이 더 우선순위.
(안드로이드에서 스레드와 서비스의 차이가 뭘까?)

JDBC api는 단순히 db연결용이아니라, 컬렉션, 예외관리, io, 네트웤, 스레드를 응용해서 그 위에 얹어져 db연결하는 api를 제작한 것.
- jdbc의 resultset과 컬렉션 비슷

자료 : http://192.168.211.252:8888에서 C:\OOPSW로 다운로드

빌드의 어려움때문에 빌드프레임워크가 나옴, 아무리 찾아도 없으면 api를 만드는 것.ㅎㅅㅎ
전공자는 스토리를 안봄. api를 써야하는지 말아야하는지 생각해야함.
자바로 전자제품 프로그램 가능, 임베디드도 가능, 안드로이드가 그 예. 중간에 해석기가 필요(VM)
자바는 이미나온 c와 웹기술중 좋은 것만 흡수
자료구조를 이해하면 vm이해, 소공을 이해하면 개발 스토리 이해가능, db를 이해하면 업무모델링 기법을 이해할 수 있다.
IDE는 interface development environment (interface는 tool의 의미), 
	(스토리)object가 자리 잡은 시기 - 유연성이 중요 - 이클립스는 유연성이 큰 툴. netbean이라는 무거운 툴에서 탈피
	일반 툴로 개발을 먼저공부하고, ide를 사용한다. - 그릇빚기연습과 같은 원리
	안드로이드는 2008년도 출시, 자바api활용. c++보다 개발자를 위한 언어로 자바api+XML를 사용(시장흐름에따라)
		웹때문에 자바 이미 자리잡았고, 우리나라에서는 IMF로 인해 IT서비스를 발전시키면서 자바 습득(90년대 정부주도사업과 전세계적으로 자바붐)
		달빅VM(안드로이드) 과 자바VM(sun) 는 다른것. 오류가 다르게 뜸. 코딩방식은 java이므로 안드로이드와 자바가 같아보인다. 
		- 연두색은 빨간색(리눅스커널)기반으로 작동하는 라이브러리:커널라이브러리(주로 ㅇos종속적인 코드, C) (독립적인 것은 컴포넌트, 자바)
		- 노란색은 os와 통신 , 리눅스의 커널과 통신) 
		위 두개를 몰라도 애플리케이션 프레임워크 api를 이용해서 쉽게 개발할수 있는 api직군.
		틀은 알고 있는 상태에서 api를 사용해야한다.
	- 5p. 안드로이드 아키텍처를 정리하다보면 서버 아키텍처, 소프트웨어 개발 고려사항도 이해하게 됨.
		애플리케이션 프레임워크에서 오류 발생시 앱만 죽고, 
		애플리케이션 프레임워크 밖으로 나가서 안드로이드런타임과 라이브러리에 영향을 미치는 경우 기기에 문제 발생(최근 앱에서 탈출불가능하게 하는 추세)
	안드로이드 도메인에 자바로 시작하는 라이브러리 공부 (어디서든 이용가능한 api를 공부할 것), api의 유무가 기술의 가능성여부를 체크하는 중요한 기준.
	
자바 jdk1.0 
	1.1 1.2 1.3 (XML공식api가 없었음, 다양한 라이브러리 사용)
	1.4 --> + XML API(자체 표준라이브러리)
	1.5 5.0 --> open_sdk형태로 제공됨(문서), 솔루션 회사들은 제작가능.  @, <>제네릭, for(:) : c++에 익숙한 개발자가 요청한 문법.
		c++개발자들이 무료인 jsp로 갈아타면서, 그들의 요구를 수용하게 되었다. 
		구글과 안드로이드는 법적 분쟁이 있지만 , 이미 sdk가 있어서 무관
	1.6 --> spring이 @, <> 신규 문법으로 자리잡음. 프레임웤기반 프로그래밍으로 전환
	아직까지 초창기 자바인 1.4나 스프링이 있는 1.6을 많이 사용. 
	1.7 --> 전자정부프레임워크의 최신테스트 버전.
	1.8 --> 보안이슈 api대거 추가
api패키지를 보면 표준을 알 수 있다. 오류메시지도 패키지부터 확인.
패키지명은 보통 소문자, 특별한경우가 아닐 때.
java.lang 의 interfaces(연결고리만), classes(구현부도 포함): 이름이 길어도 풀네임, 카멜표기
	이식성,유연성이 좋으므로 이름이 길어도 명확하게 표시 - cpu는 충분해졌으니까 속도가 중요하지 않음.
	(심플, 명확, 가시화)
	배안에는 조선기술과 소프트웨어기술이 들어있다. 직접배를 제자갛는것이 아니라 it기술을 판매하면 됨. 
	그런데 현재 우리나라의 라이브러리는 processbuilder를 pb로 표시함.ㅋㅋ 소프트웨어를 팔거라는 생각을 못함
	그래ㅓㅅ 중요한 것이, 리팩토링! pb보다는 processBuilder가 사용하기 좋다!
	현재 우리나라에 기술만 있고, api만드는 노하우가 없었다. 리팩토링이 필요.
interface와 classes아래에 error와 exception이 아주 많음. 프로그램 안과 밖중 어디서 문제를 알려줘야할까.
since 1.7 : 몇버전에서 개발했나 확인. 새로나온 메소드는 기존구조를 이해하고 이로운지 아닌지 파악해서 사용해야함.
	우리가 표준인데 api를 다르게 사용하는 경우 예측불가능한 문제가 발생. 그래서 잘 쓰는게 중요.
	클래스 멤버나 클래스 자체가 버전업그레이드에서 추가되는 경우가 있음. 
	개발환경을 바꾸면 외부에서 썼던 라이브러리 중에, 내부에서 썼던 라이브러리가 있는지 확인 필요 - 합치고 나서 언어를 구분해서 import필요

