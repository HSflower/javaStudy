//요구사항
학생정보를 관리하는 프로그램 작성

학생은 로그인을 할 수 있다.
+ id는 문자열로 8자 이상이어야 합니다.
+ 비밀번호는 숫자로 4자만 가능합니다.
학생은 학번, 이름, 성적 등을 확인할 수 있다. : exception패키지에 에러처리
학생은 비밀번호를 수정할 수 있다.

//자바 또는 기타 언어로 20분간 작성.
// 압축해서 소스만 업로드

//아는 선에서 개발, 완벽하게는 모르더라도. 어느부분이 부족한지 캐치해서 찾아가는 것이 중요.

1. 계획, 추상화가 먼저 - 느리더라도 간결하고, 제대로
	//객체의 멤버들에 업무분석, 변수 의미 등을 주석으로 달아주는 거라도 필요
	 나중에 이 주석을 사람들에게 정리해서 보여주면 문서가 되는 것.
2. 형태에도 중복코드가 없어야 한다. 
   생성자 중복코드도! 생성자도 만들었으면 잘한 친구

함수(프로시저)방식, 객체지향방식
정보공학방식(데이터베이스), 프로그래밍 방식(기능에 따라 네이밍)

다형성 : 최대한 넓은 자료구조를 포괄할 수 있는 자료구조 사용(컬렉션)

일반메서드는 일반적으로 대문자로 안함.
dao코드 - 업무 기능(메서드), 대문자
vo - data부터 분석하는 코드(private)
test - main(), ui대신
각각 다른파일로 작성.
(초창기에는 자바 라이브러리 다 분석했었음. 지금은 다 아심. )
패키지는 디렉토리 위치 - 다른 패키지에 있는 것은 임폴트

// 요구사항 명세서 정의 시, (현장에서는 클래스가 아니라 인터페이스 먼저 설계
 명사 : 
	학생정보
	    학번
	    이름
	    이름
	    성적 : 사용자정의객체로 정의 (다양한 형태로 존재하므로)
	    비밀번호 
 동사
	로그인() ?
	학생정보확인()
	비밀번호수정()
 주어 --> 사용자, 시스템
 학생(UI) --> targer
//단순사용법이 아니라 의사결정 문제

프로젝트 생성시
패키지 이름은 , com.domain(oopsw).school
클래스이름은 , StudentVO 등
---------------------------------이하 실습

----------------------------------------------------------
업무분석할때는 (추상화) 논리모델링, 구현 고려하지마랏 - 76쪽
설계도 (구현부가 없음!) : 구현을 염두에 두지말고 같다 다르다를 판단할 것.

물리모델링에서 데이터베이스 종류 등 구현을 고려하자.
- 생성자, 메서드 등

---------------------------------이하실습
학생 - 학번,이름, 출력
교사 - 교사번호, 이름, 출력
해시코드랑 이퀄스도 항상 만들어 둘것, 데이터 가 있다면.


임베디드는 그냥 날코딩해도됨
자바는 안됨. 툴 이용해서 상속이용 등 환경적인 변수가 많음.

프로그램의 문제점을 찾아보자
프로그램의 요구사항에 만족하는 것이 성능평가기준(품질관리)

100만원짜리 카드결제 시스템~

컬렉션 API 분석하기
1. 추상화,인터페이스 실습
2.
3.

테스트 코드 먼저 작성
티디디는 문제점과 그것을 해결하는 것, 디자인패턴과 문법에 따라 할일이 정해진다.

레퍼런스 주소가 꼬이지 않도록, 
컬렉션으로 결과형 선언 후 

인터 페이스 설계 
1. 선언을 먼저해두고 인터페이스 틀을 만드는 것.
2. 값을 넣기 위해 셋 함수 쓰는 것.
   그래서 나온게 제너릭 타입. <E> : element (데이터, VO), 부유성격의 데이터에 적용
   <O> : object, <T> : templete(구조)

for : array
그 외의 경우자바에서는 while권고 , foreach권고(from xml문법, 이터레이터-원래 라이브러리(139쪽)인데 편해짐)

자바를 확실히 알고, 다른언어를 배우면 6개월이면 다볼 수 있음 ㅎㅅㅎ

자바스크립트 확실히 분석하면 자바와 씨플플분석가능

테스트코드를 만들다보면 기능이 잘 끌어내짐.


key word of JAVA OOP
1. collection
2. 다형성 - 인터페이스
3. exception
어떤 라이브러리든 위의 사항을 설명할 수 있다면 자바의 기본을 아는 것입니다.
아키텍처와 리팩토링도 마찬가지

오늘
세개의 키워드를 기반으로 네트워크까지 하도록 JDBC실습
웹의 메인은 HTML, JS가 메인, 서버프로그래머도 메인은 아니지만 알아야함.
 HTML, JAVAScript도 개발자가 원론이해부터 시작해야함. (현재 툴베이스) - 우리나라의 문제, 해외 더 줌
안드로이드는 XML이 핵심이고 JAVA가 서브
 XML 은 여기저기 사용됨 - 개론 수업 필요! http://www.w3schools.com/

자바공부는 어떻게 해야 제대로 하는 걸까요 - 인터넷강의 등 듣기
계획이 마무리되어 갈 때 다음 계획을 세우기

스터디 같은 주제로 다같이하고, 한명이 끝나면 멈추고
다 한사람이 설명하기 , 다른 사람들도 고민하고 들으면 많이 남음
애자일 방법론의 페어 프로그램

패키지 이름은 소문자, 클래스 이름은 대문자

개발하는 기준은 요구사항의 기준, 맞고틀리다는 문법 말고는 없다.
PM이 이런 기준을 정해서 공유해주어야 함. 변경가능한 기준 등은 경험에 따라 알 수 잇다.
절충해서 원하는 방향으로 개발을 이끌고 가면 된다. 우물우물하거나 상관없는 부분은 빠르게 결정하고 넘어가자.

프로젝트 전에 예외를 만든다.
타이밍을 놓쳤다면 안만드는게 좋다. 기존에 있던 것을 활용하는게 나음.

데이터가 먼저나오면 제너레이트 메서드들
선언 생성 초기화
자바의 널포인터 익셉션

앱개발자는 중간 색인이 불가능하고 순서가 있음.
웹개발자는 중간 색인이 가능해서, 꾸준히 랜덤 순서 선언생성초기화 체크가 필요하다.
웹-> 앱은 가능, 앱->웹은 어려움

처음에는 잘 아는 걸로 하고, 결과가 나오면 쉬고, 
다음번에 문제점을 찾아서 해결

객체지향프로그램에서 식별자를 정확히 처리하는 게 중요.

임베디드는 당장 성능 높도록만 작업 - 혼자일하기 좋음
객체지향/일반적인 업무기반소프트웨어는 혼자하는 일 없음, 모듈사이의 통신이 중요. - 오지랖이 중요, 생성자도 여러개만들고
 인터페이스 설계는 합리적인 사고가 중요. 이기적인 사고와는 다름. 협업이 중요

개발 중간중간 미심쩍은 부분 단위테스트해서 한번씩 끈헝가기

객체지향에서는 단위테스트는 문제가 없을때까지 계속 테스트 - 앞에서 부터 문제 해결
테스트에서 맞는 경우 - 예측한 것이 명확하면 잘하는 것. yes
테스트에서 예외 경우 - 예측한 것이 명확하면 잘하는 것. no
오류 패키지들을 보고, 서버, 기본패키지, 사용자정의패키지인지 파악 가능

업무주는 사람들은 제대로 얘기안함 
명확하지 않은 오류상황에 무대포로 코딩하거나 오류를 제대로 안보면 효율이 좋지 않다.

객체지향에서 조건문 반복문을 짧게하는 것, 중첩을 최소화 하는 것.
생각을 끊어가고, 예외관리를 한다.
throws를 이용하면 else안쓸수 있음.

업무분석때 설계 표준이 있는지 확인, 없으면 문서를 받아야 나중에 덤탱이 안씀.
그 다음부터는 문법을 알면 됨.
인터페이스는 안건드리는 것이 좋음.
시작시 리턴할 변수  널로 초기화 하고, 종료시 리턴 값을 지정하고 시작

문법을 많이 알수록 테스트 를 많이 해야 다양한오류상황들을 잡아낼 수 있다.

체크드 익셉션이 맥락상 쉬움.
장기적으로 봤을 때는 추상적, 다양한 관점으로 해석 가능
객체지향프로그래밍이 어려운 이유 : 생각을 해야하고, 답이 없는 경우의 수
엔지니어적인 성격은 기반기술 쪽
시장에서 필요한 개발자는 임베디드보다 일반적인 앱, 아이티 융합소프트웨어(로봇과 의료를 연계하는 프로그램) 개발자
덤탱이 안쓰려면 어디까지 하겠다는 틀을 정하는 인터페이스 설계가 중요.


마이에스큐엘 - 보안취약, 오라클로넘어감, 한국 대기업/공기업은 거의 안씀
응용은 기업마다 요구순서가 다름 - 시중에서는 팔리지 않음.  
emp는 오라클 올드버전 8정도. 10버전은 32비트, 64비트 둘다 지원, 무겁지만..

다운받은 프로젝트파일에 .project/ .java에서 (xml로 구성)
자바는 플랫폼 독립적, xml은 애플리켕션 독립적, 
project description 에서 프로젝트 명 변경가능, 그후 폴더이름도 변경하고 복사 해서 워크스페이스폴더에 프로젝트 붙여넣고,
프로젝트의 제너럴으로 해서 프로젝트 오픈/임폴트 해서 사용 가능
 - 이거 안해주면 형상관리 툴쓰다가 오류남.

문서작성 : file - export - java - javadoc 
주석안에 @들이 합쳐져서 문서가 작성됨 - 그냥주석도 달림
이클립스 내장 웹브라우저에서는 자바스크립트가 일부만 작동함.
테스트 브라우저를 크롬이나 사파리로 함. windows-preference-web browser, JAVA EE perspective - window - web browser'
non checked exception은 주석에 표시해서 api에 나오게 해줌, throw로 넘기거나,
jar파일도 따로 업로드 해주는게 친절한 것.

오라클 SE버전
기업에서는 LAMP 사용하지 않음. - 오픈소스로 학생들 프로젝트에서나 사용. 빨리 돌리고 빠지기는 좋지만, 오류가 많음.
 충분히 알고있는 엔지니어가 확보되어야 문제 해결을 잘할 수 있음. 
 엔지니어가 없다면 솔ㄹ션을 사용
그 후 ATMJsp 서블릿이 더 중요한건데
IBM, (Oracle, BEA,HP) 이 서버들이 할 수 있는 기능이 훨씬 많은 유료 웹서버지만 잘 사용하지 않는 기능들
웹서버는 오픈소스인 톰캣으로 많이 감. 톰캣이 할 수 없는 기능이 더 비싸지만 보통 사용하지 않는 기능.
- 서버나 웹 애플리케이션 서버는 변경 가능, 데이터베이스는 변경하지 않음(IBM, 주로 oracle로 사용)
- DBA가 되려면, OCP라이센스업그레이드하고 그래도 과거와 달리 이미 공급이 많아서 신입을 받아주지 않음. 일자리가 적다.
  DB팀이 있는 조직으로 취업해서 자격증을 회사에서 취득해라

sys계정 잃어버리면 재설치해야함
설치폴더 기억 1521포트, 2030은 내부적으로 사용 8080은 관리자프로그램 포트(추후 톰캣과 충돌 가능성있음. 웹서버 포트는 8080쓰지 않도록)
스타트이거? 해킹가능 - 10g에는 없음.

솔루션 개발은 거창한게 아니라, 편의를 위해 필요한 기능을 구현하기 위해 간단한 ui와 핵심기능외 부가기능을 구현하는 것
예) 오라클 프로그램에서 관리 시스템을 무거운 윈도우프로그램 대신 html로 구성해서 브라우저에서 웹과 로컬의 연동이 편리

현재 트렌ㄴ드는 RDB가 아니라 OODB(RDB포함)
실제 현장에서는 서버는 하나 (DBA가 관리), 나는 사용자로 접속
이클립스에 연결해서 사용
J develope 통신연결해서 사용
토드라는 어플리케이션 사용
 
네트웍을 같은 것을 사용하면, 같은 디비로 협업 가능(다같이 유선이면 유선, 무선이면 무선, 컴퓨터와 핸드폰에 같은 와이파이 잡으면 서버 테스트 가능-ip변경되는 것만 확인하면 됨)
디비는 서버, 내컴퓨터는 클라이언트 = IO
JDBC = 통신프로그램과 IO프로그램이 같이 들어있는것.

클래스의 비중이 크다 - 인터페이스는 부모고, 클래스들은 경우의 수 
- 디비연결프로그램 구현체는 디비드라이버(lib = .jar), 프로그램마다 포트도 다름
인터페이스의 비중이 많으면 구현한 것이 없다는 것. 또는 숨겨놓은 것
초창기 모든 sql오류는 SQLException, 익셉션 처리 클래스가 하나인 것.

char 	[] - String
varchar StringBuffer
varchar2
디비에 따라 데이터 타입 표기법이 달라짐.
드라이버가 이런 차이를 ㅣㅌ나지 않게 해주는 것. 스마트폰드라이버/프린트 드라이버 등
- 설치할 컴퓨터의 운영체제와 연결할 기기의 정보가 중요하다
- ojdbc14.jar (odbc는 운영체제에 넣는것) : 오라클과 JDBC를 연결하는 것. 운영체제에 설치하면 느려지므로 VM에 설치
내 프로그래밍은 DAO, 이것은 sql&JDBC driver참조함. - perspective = database development

모든프로그램엔 예외처리,예외정책이 있다. 코드화 해서 자세한 설명을 해주고, 코드 정책만 다를 뿐
개발자가 데이터베이스 명령어를 다 알고 보안정책을 고려해서 코딩하는 게 아니라
개발할때 필요한 기능만 오픈해서 사용하도록 하는 것이

이클립스에 어떤 디비를 써도 다 연결가능 - 데이터베이스 디벨롭먼트 관점 이용

<드라이버 설정정보>
오라클은 드라이브가 다양 - thin driver가 무료
connectionURL에서 디비에 연결 설정, 시스템 ID(SID) = XE -디비마다 다름

최근 애플리케이션 보안이 개발자의 주요 이슈, 특히 SQL injection
아직 초창기에 만든 php가 많고 jsp로 바꾸는 추세 

ORA-xxxx에러는 오라클디비에서 주기도 하고, 드라이버에서 주기도 함, 
try catch 에러 처리는 보통 마지막에 
	예외가 애매할 때, 명확하게 예외를 바꿀때에도 발생함.
	- 예외가 역사가 짧아서 경험이 적기때문에 처음부터 명확할 수 없다, 요구사항, 사람, 환경에 따라 예외가 발생하기 때문에.
eclipse : 아마타나스 uml,  	국내제품 토마토시스템 exerd
콘솔띄워서 디비해도 되지만(방법은 알아야하지만), 실제업무에서는 이클립스기반 프로그래밍에 필요한 쿼리를 이용한다.
 성능이 좋은 소프트웨어를 만들려면 디비를 알아야 한다?
 개발자로서 다양한 디비를 사용하는데 각각에 맞게 하려면 
 - 이클립스에서 디비 종속이아니라 디비 독립적인 프로그램을 만들어야함.
전자정부 표준 권장 : 이클립스의 database development
 이 안에서 insert , delete, update테스트 하면 도미.

dql - select
dml - insert delete update 
------------여기까지는 기초과정(개발자가 쓰는부분) 잘하면 업무를 배워서 해당 산업의 업무전문가가 되어야 함.
ddl - create, alter, drop --> DBA(업무전문가 - DBModeling)
dcl - DB system 담당 - 이미 담당자들이 자리잡고 있음, 신규인력 없음. COBOL, assembly등 여전히 은행에서는 사용


//스키마는 대소문자 구분 안함, 디비에서 언더바 사용
sql에서는 요구사항에 맞게 출력되도록 하는 것- 요구사항과 컬럼이 안맞더라도 쿼리로 맞춰야됨
요구사항이 계속 변경되면 결과물이 달라져야 하므로 sql이 그에 따라 달라짐.
디비전문가가 짠 쿼리가 성능이 훨씬 좋았음. 근데 정작 지금은 분업이 되지 않음. 
 분업이 되면 : 중요한 조직일수록 쿼리를 업무전문가에게 맡기고, 개발자가 만들면 검토함(속도는 느림)

오브젝트 다이어그램 : 화살표가 없고 :이 있음
- 오브젝트 : 프로젝트상에서 인스턴스 오브젝트를 의미
	    대상-업무분석(클래스)-프로그램(실행)
	 리얼오브젝트		 인스턴스 오브젝트
	    문자열   String.java   String [ s ] = new
	     논리 			물리
- 오브젝트 다이어그램은 (주소,인스턴스이름):(클래스) 로 표시

	* 레코드는 인스턴스(값)

아는만큼 보인다.

187페이지.
클래스 중에서 몇안되는게 driverManage : 드라이버가 여러개 필요하지 않으므로, 드라이버 매니저는 메모리에 한번만 올라감.
드라이버 매니저 (최종 조상)는 하나이고,
다양한 디비의 드라이버를 여러개 올려도 다 드라이버 매니저가 관리 가능
각각의 디비 드라이버들은 여러개의 연결(커넥션)을 가질 수 있다. = 공유, 디비의 동시성
- 커넥션 : 디비 드라이버를 연결하는 것이 커넥션.
  스레드 개념과 연결해서 생각, 단순한 연결고리가 아니라 일하는 단위.
커넥션이 연결되어 있고, 
statement로 실제 sql문을 전달하고(여러개면 동시에 여러 개의 명령어 전달 = 프로세스 분할로 동시성), 
결과값은 :ResultSet은 하나만받을 수 있다(무결성). 
 
JDBC프로그래밍 순서 : 드라이버로딩(드라이버매니저) - 디비연결 - 쿼리 전송 - 결과값받아서 처리 - 종료close(연결을 바로 쓰려면 안닫고, 공유한다면 빨리 클로즈)
- 세션이 연결을 지속하게 해줌. 포탈이나 은행 등 연결관리






