[[개요]]
1. 개발 환경 설치 : JDK, Eclipse
2. 기반도구: Maven(빌드 도구), JUnit(테스팅 프레임워크), Slf4j+Logback(로깅), Spring Framework

[개발환경설치]
1.
2.
3.

[기반도구:빌드도구 Maven]
[기반도구:테스팅프레임워크 JUnit]
[기반도구:로깅 Slf4j+Logback]
*로깅 프레임워크 간의 역할과 특징, 핵심적인 사용법, 실무에서 적용할 때에 주의할 점을 설명
*로깅에 대한 실습은 실습W05에서 수행
- 로깅 프레임워크 사이의 관계: Apache Commons Logging (이하 ACL)와 SLF4j는 로깅을 할 때 쓰는 인터페이스를 제공한다. Log4j와 Logback은 로깅 기능을 실제로 구현한 프레임워크이다. 이 외에도 java.util.logging 패키지에 있는 JDK의 기본 로깅을 ACL이나 SLF4J를 통해서 쓸 수도 있다.
  이렇듯 다른 역할을 가지고 있기 때문에 아래 4가지의 조합이 다 가능하다.
ACL + Log4j
ACL + Logback
SLF4J + Log4j :따라서 누군가 '저희는 Log4j 대신에 SLF4J를 써요.'는 로깅 프레임워크의 역할을 제대로 이해 못했다는 것이다.
SLF4J + Logback
구현체는 언제든지 바뀔 수 있으므로, Java코드에서는 Log4j나 Logback의 API를 직접 쓰지 않고 SLF4J나 ACL에만 의존하기를 권장한다.
뒤에서 설명할 SLF4J의 파리미터 치환 기능이 편리하기 때문에 근래의 프로젝트에서는 ACL에 비해 SLF4이 압도적으로 선호된다. 구현체로는 Log4j이 발전이 느린동안 Logback이 떠올라서 많이 선호되었었다. 그러나 최근에는 Log4j 2.x버전이 Logback의 장점을 흡수하고 계속 발전하고 있기에 현재는 Logback과 Log4j 2.x는 어느 한쪽의 장점이 압도적이지 않다.
이후의 실습에서 활용할 Spring Boot에서 Sl4j와 Logback을 디폴트 로깅 인터페이스/구현 프레임워크로 제공하기에 굳이 디폴트로 설정된 의존성을 조정하기 않기 위해서이다.
[SLF4J + Logback]
1. SLF4J 핵심 API
*Windows > Preference > Java > Editor > Template 에 아래와 같이 등록해 놓기를 권장
${:import('org.slf4j.Logger', 'org.slf4j.LoggerFactory')}
private final Logger log = LoggerFactory.getLogger(${primary_type_name}.class);
 .e.g. 
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public MyClass {
    Logger log = LoggerFactory.getLogger(MyClass.class);

    public void someMethod() {
        log.info("Hello world");
    }
}
- Spring Boot에서는 디폴트로 SLF4J + logback을 쓸 수 있도록 의존관계가 조정되어 있어서 아래와 같은 <exclusion> 선언이 필요하지 않다.
- Spring framework을 쓸 때의 주의 사항
Spring framework: 내부적으로 Apache Commons Logging 사용
->Spring-framework를 사용하는 어플리케이션에서 SLF4J를 쓰고자 한다면 로깅 프레임워크의 의존관계를 조정 필요
  : (jcl-over-slf4j가 Apache Commons Logging을 대체하는 원리) jcl-over-slf4j는 Apache Commons Logging과 같은 패키지인 org.apache.commons.logging 에서 인터페이스를 제공하고 있다. org/apache/commons/logging/impl 패키지의 클래스에서 Slf4j의 인터페이스를 호출하는 래핑 클래스를 확인할 수 있다. 
   ( https://github.com/qos-ch/slf4j/tree/master/jcl-over-slf4j/src/main/java/org/apache/commons/logging 참조 )
  : Apache commons logging에 대한 의존성을 제외 선언 후, jcl-over-slf4j 에 대한 의존성을 대신 추가
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>x.x.x</version>
    <exclusions>
        <!-- Exclude Commons Logging in favor of SLF4j -->
        <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </exclusion>
    </exclusions>
</dependency> 후,
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>jcl-over-slf4j</artifactId>
    <version>1.7.22</version>
</dependency>
2. LogBack
- Slfj + Logback 조합을 사용하려면 아래 3가지의 jar파일이 필요하다.
  : logback-classic.x.x.x.jar, logback-core.x.x.x.jar, slf4j-api-x.x.x.jar
    logback-classic에 logback-core, slf4j-api가 의존성이 있기 때문에 pom.xml에 아래과 같이 추가하면 세 개의 jar 파일을 다 참조할 수 있다.
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.1.8</version>
</dependency>
- src/main/resources 폴더에 아래와 같이 logback.xml을 넣으면 로깅에 대한 옵션을 조정할 수 있다.
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                <layout class="ch.qos.logback.classic.PatternLayout">
                        <Pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{20} : %msg%n</Pattern>
                </layout>
        </appender>
        <root level="debug">
                <appender-ref ref="STDOUT" />
        </root>
</configuration>
[로그 성능에 영향을 미치는 요소: 문자열 처리]
- ACL보다 SLF4J를 더 권장
- 로깅옵션

[[Spring Framework 개요]]
spring-webmvc-4.3.7.RELEASE.jar나 spring-jdbc-4.3.7.RELEASE.jar 같은 모듈은 Spring Framework의 하위 모듈이다. 
이렇게 jar파일명 기준의 모듈명을 일컬을 때는 앞으로 편의상 spring-jdbc, spring- webmvc라고 칭하겠다. 
이번 과정에서 DB에 쿼리를 실행하는 기능은 spring-jdbc를, REST API를 만드는데에는 spring-webmvc를 쓸 것이다. 
테스트 코드를 작성하는데에는 spring-test 모듈을 활용한다.
( Spring Framework 전체 구성 :http://docs.spring.io/spring/docs/current/spring-framework-reference/html/overview.html )

웹서버 설정 등을 간편하게 하기 위해서 Spring Boot도 활용한다.
참고로 Github 저장소를 기준으로는 아래와 같이 Spring Framework과 Spring Boot는 분리되어 있다.
https://github.com/spring-projects/spring-framework
https://github.com/spring-projects/spring-boot
Spring을 사용할 때 Spring Framework 프로젝트의 하위 모듈인지 별도의 프로젝트인지 구분을 하는 것도 라이브러리 간의 의존관계나 버전관련성을 파악하는데 도움이 된다. 예를 들면 Spring Boot 1.5.3.RELEASE 버전은 Spring Framework 4.3.8.RELEASE 에 의존하고 있다. Spring Framework 하위 모듈인 spring-jdbc와 spring-test는 같은 버전끼리 의존을 해야한다.
Spring Framework과 이를 활용한 프로젝트들은 Dependency injection 기법을 그 핵심 원리로 활용하고 있다. 
앞에서 나온 이미지에서 'Core Container'에서 제공하는 기능이다. 

1. Spring JDBC의 핵심 사용법
Spring JDBC는 위와 같은 불편함을 개선한 클래스를 제공한다. 
Spring JDBC에서 자주 쓰이는 클래스/인터페이스는 아래와 같다.
- NamedParameterJdbcTemplate : 이름이 붙여진 파라미터가 들어간 SQL을 호출
   SQL 쿼리 안에서 ?로 표현되던 파라미터를 :productName과 같이 이름을 붙여서 지정할 수 있다. 
  여러 개의 파라미터가 있는 쿼리를 실행할 때는 JdbcTemplate보다 NamedParameterJdbcTemplate을 사용하기를 권장한다.
  NamedParameterJdbcTemplate의 동작은 NamedParameterJdbcOpertaion라는 인터페이스에 정의되어 있기도 한다. 
  참조타입으로 그 인터페이스를 활용할 수도 있다.
  NamedParameterJdbcTemplate은 DataSource 객체를 필요로 한다. 생성자에서 DataSource를 전달받을 수도 있다.
  JdbcTemplate 계열은 멀티스레드에서 접근해도 안전하다. 따라서 매번 객체를 생성할 필요는 없다. 아래 코드의 jdbc 변수처럼 클래스의 멤버 변수로 두고 참조를 할 수도 있다.
  
- RowMapper : ResultSet 에서 값을 추출하여 원하는 객체로 변환
  JDBC의 인터페이스인 ResultSet에서 원하는 객체로 타입을 변환하는 역할을 한다. 기본적인 전략을 구현한 클래스는 Spring JDBC에서 제공을 한다.
  - BeanPropertyRowMapper : ResultSet -> Bean 으로 변환 - ColumnMapRowMapper : ResultSet -> Map 으로 변환
    DB의 컬럼명과 bean 객체의 속성명이 일치하다면, 자동으로 객체 변환 가능
  - ColumnMapRowMapper: ResultSet을 java.util.Map으로 반환
  - 수동변환
- SqlParameterSource : 쿼리의 파라미터 지정, SQL에 파라미터 전달
  - BeanPropertySqlParameterSource(기본구현체) : getter/setter가 있는 Bean 객체로 파리미터 전달
    직접 Map을 파라미터로 받는 메서드가 많기에 MapSqlParameterSource를 쓰지 않고 Map으로 바로 파라미터를 넘길 수도 있다.
    파라미터인 :name, :telNo 등은 Seller 객체의 속성명과 동일하다. 이럴 때는 BeanPropertySqlParameterSource을 활용하면 파리미터 이름과 대응되는 getter 메서드를 호출하여 값을 전달하게 된다.
    public class SellerSqls {
	public static final String UPDATE = """
		UPDATE seller \n
		SET name = :name,
			 tel_no = :telNo,
			 address = :address,
			 homepage = :homepage
		WHERE id = :id
	""";
    	public int update(Seller seller) {
		SqlParameterSource params = new BeanPropertySqlParameterSource(seller);
		return jdbc.update(SellerSqls.UPDATE, params);
	}
  - MapSqlParameterSource :  Map과 비슷한 형식으로 파라미터를 지정/전달
    메서드 체인 형식으로 파라미터를 정의할수 있는 장점이 있긴 함^^;
    SqlParameterSource params = new MapSqlParameterSource()
    .addValue("name", "판매자1")
    .addValue("address", "마포구 용강동");
- SimpleJdbcInsert : Insert 쿼리를 자동생성
  직접 INSERT 구문을 쓰지 않고도 DB에 데이터를 저장할 수 있다. DB 컬럼명과 객체의 속성명이 일치한다면 아래와 같은 단순한 코드로 DB에 데이터 1건을 입력할 수 있다.
  BeanPropertyRowMapper로 마찬가지로 이때 DB컬럼명의 snake_case는 java객체에서는 caseCase로 자동으로 바꾸어준다.
  데이터를 입력하는 시점에 DB에서 값을 증가시켜서 자동으로 PK(Primary Key)가 결정되는 경우가 있다. 예를 들면 DB스키마가 아래와 같을 경우이다.
  그런 경우에는 usingGeneratedKeyColumns(), executeAndReturnKey() 메서드를 활용하면 된다.
  로그로 어떤 SQL이 실행되었는지 확인할 수 있다. org.springframework.jdbc 패키지의 로그레벨을 'DEBUG'로 설정하면 아래와 같이 실행된 쿼리가 나온다.
  SimpleJdbcInsert의 excute(), executeAndReturnKey() 메서드는 멀티스레드에서 접근해도 안전하다. 따라서 아래와 같이 클래스의 멤버변수로 지정해도 된다.
  만약 DB컬럼명과 클래스의 속성명이 자동으로 매핑될수 없다면 java.util.Map이나 MapSqlParameterSource을 이용해서 수동으로 선언할수 있다. Map을 쓰는 예제는 아래와 같다.
  참고로 SimpleJdbcInsert.execute()를 호출할 때 MapSqlParameterSource를 파라미터로 넘기면 BeanPropertySqlParameterSource처럼 camelCase와 snake_case 간의 자동변환이 이루어진다.
  예를 들어 DB컬럼명이 'seller_id'로 되어 있더라도 아래와 같이 'sellerId'를 파리미터의 이름으로 지정할 수 있다.
- javax.sql.DataSource 인터페이스: DB에서 Connection 객체를 얻어오는데 쓰이는 인터페이스
  Spring JDBC에서 DB에 연결을 하는 역할은 위의 DataSource 인터페이스에 의존을 하고 있다. DataSource를 구현한 클래스들은 모두 Spring JDBC와 함께 사용할 수 있다. 인터페이스이기 때문에 구현체를 갈아끼우기에도 용이하다.
  대표적으로 DataSource 인터페이스를 구현한 라이브러리는 Apache Commons DBCP가 있다. DBCP는 어플리케이션이 데이터베이스에 매번 접속하는 비용을 줄일 수 있도록 DB에 연결하는 객체를 모아두고 돌려쓸 수 있는 기능을 제공한다. 이런 기능을 '커넥션 풀'이라고 칭한다. 커넥션 풀은 어플리케이션의 성능을 개선하고 적절한 숫자의 커넥션이 유지되도록 제약하는 역할도 한다.
  Spring JDBC에서도 DriverManagerDataSource라는 DataSource 구현 클래스를 제공한다. JDBC API의 DriverManager.getConnection()로 Connection을 얻도록 구현한 클래스이다. 이 클래스는 DBCP와 같은 커넥션풀 기능을 제공하지 않으므로 주로 테스트 용도로 쓰인다.

[[REST API와 Spring MVC]]
[REST API: 웹과 HTTP의 기본에 충실한 방식으로 프로그래밍 인터페이스를 제공]
- 권장되는 스타일
API의 대상 리소스를 URL로 표현: 동사보다는 명사 우선, 리소스당 2개의 URL을 기본적으로 사용, 리소스와 관련되지 않는 URI에는 동사 위주
HTTP 메서드로 행위를 표현: POST : 생성, GET : 조회, PUT : 갱신/생성, DELETE : 삭제
e.g. GET /books : 책 목록 조회
GET /books/{id} : 책 상세 조회
POST /books : 새 책 입력
PUT /books/{id} : 책 수정
DELETE /books/{id} : 책 삭제
REST API의 자세한 개념과 권장하는 스타일에 대해서는 http://meetup.toast.com/posts/92 를 우선 참조한다.

REST는 아키텍처 스타일이자 패턴이다. REST가 엄격한 표준은 아니기 때문에 특정 API가 REST 스타일을 따랐는지는 논쟁적일수도 있다. 현재 REST API라고 개발자들이 지칭하는 API들이 사실은 REST의 창시자 로이필딩이 말한 기준에 부합되지는 않는다. 

REST 스타일이 모든 상황에서 실용적이지는 않다. 예를 들면 REST 스타일을 따르지 않은 레거시 시스템에서 API를 하나 추가해야하는 경우이다. 레거시 시스템에서 상세 조회 API가 /api/bookAction?method=show&id=1와 같이 되어 있을 때 삭제 API를 추가하면서 /api/books/{id} 스타일로 했다면 기존의 API 사용자들은 오히려 혼동을 느낄 것이다. 그리고 CRUD이외의 동작을 어떤 주소로 표현하고 어떤 HTTP 메서드로 연결시키는 것이 REST 스타일에 부합할지는 명확한 답이 없는 경우도 있다.

하지만 REST는 Web API 설계에 참조할만한 규칙임은 분명하다. 설계 초기에 의사소통의 효율성을 높이는데 도움이 된다.

[Spring MVC: Spring framework의 모듈로 HTTP 요청을 받고 응답을 보내는 웹 레이어를 담당]
 ->REST API를 Spring MVC로 구현: Spring Boot 환경 Spring MVC의 애노테이션을 이용해서 REST API를 구현
- REST API를 구현할 때 추천하는 Spring MVC의 애네테이션
  @RestController :이 애너테이션이 붙은 클래스가 REST API를 구현하고 있음을 표시한다.
  @GetMapping, @PostMapping, @PutMapping, @DeleteMapping: Controller 클래스안에서 처리할 HTTP 요청을 지정하는데 쓰이는 애너테이션들이다. 
  각각 HTTP 메서드 중 GET, POST, PUT, DELETE와 대응
  + (Spring 4.3부터 HTTP 메서드마다 별도의 애노테이션들이 추가) @GetMapping은 @RequestMapping(method = RequestMethod.GET)과 같은 의미이다. 
    :이러한 HTTP 메소드별 애너테이션을 활용하면 코드를 더 짧게 쓸 수 있고, HTTP 메서드를 더 적극적으로 드러낼 수 있다. 
     HTTP 메서드를 적극적으로 활용하는 REST 스타일과도 잘 맞아떨어진다.
  @RequestMapping : Spring MVC에서 HTTP 요청 주소 매핑에 쓰이는 대표적인 애너테이션



