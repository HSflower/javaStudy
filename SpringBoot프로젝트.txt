별도로 웹서버를 설치하지 않고 Spring Boot에서 제공하는 내장형 Tomcat서버를 이용할 것이다. 
Maven의 pom.xml도 직접 작성하지 않고 start.spring.io를 통해 자동 생성한다.
Spring Boot: Spring famework의 초기 환경 설정을 간편하게 도와주는 프레임워크
Spring Boot를 이용하면 pom.xml에 설정해야할 의존성 선언이나 직접 @Bean으로 등록해야할 클래스들을 대폭 줄일 수 있다. 
 그리고 Tomcat과 같은 어플리케이션 서버를 내장하고 있기 때문에 별도의 웹 서버 제품을 설치하지 않아도 된다.
 하지만 Spring Boot를 쓴다고 해도 원래의 Spring JDBC, Spring MVC를 쓸 때와 어플리케이션의 핵심 로직을 개발하는 방식은 변하지 않는다. 
 원래 스프링에서 쓰던 애노테이션과 API들은 동일한 방식으로 사용할 수 있다. 
 따라서 앞에서 배운 Spring JDBC의 클래스나 Dependency Injection에 쓰인 애너테이션은 Spring Boot에서도 당연히 동일하게 쓸 수 있다.
[개발공간 설정]
1. 프로젝트 디렉토리 미리 생성
이어지는 실습S02에서 아래와 같은 구조를 만들 것이므로, 이를 감안하여 상위 디렉토리를 만들어둔다.
└── workspace : 프로젝트 디렉토리의 상위 디렉토리
    └── book-app : 버전관리를 하는 최상위 디렉토리
        ├── book-server : Spring boot 프로젝트 디렉토리 (1~7)
         |  ├── pom.xml
         |  └── src : 서버 모듈의 소스 디렉토리
         |      └── main
         |          └── resources
         |	           └── application.properties
        └── book-client : 클라이언트 프로젝트 디렉토리 (8~)
	├── src : 정적 파일의 소스 디렉토리
	└── index.html   
2. 프로젝트 설정 다운로드: https://start.spring.io 에서 프로젝트를 생성
방법 1 : 화면을 보고 Spring Boot의 버전과 의존할 라이브러리를 선택
 >groupId와 artfactId는 pom.xml에서 해당 모듈을 대표하는 이름으로 쓰인다. 남아있는 실습의 편의성을 위해서는 아래와 같이 설정하기를 권장한다.
groupId : kr.or.connect
artfactId : book-server
 >'Search for dependencies' 란에 아래 단어를 입력하면 의존하는 라이브러리를 바로 추가할 수 있다.
web 입력 : spring-boot-starter-web에 대한 의존성이 pom.xml에 추가됨
devtools 입력 : spring-boot-devtools에 대한 의존성이 pom.xml에 추가됨
 >'Generate Project'를 누르면 book-server.zip와 같은 압축파일로 프로젝트의 초기 설정을 다운로드 할 수 있다.
방법 2: 방법1에서 'Generate Project'를 누르기까지의 과정을 URL 접근 한번으로 할 수 있다. 
 https://start.spring.io/starter.zip?dependencies=web,devtools&group=kr.or.connect&artifact=book-server&packageName=kr.or.connect&name=book-server 링크를 클릭하면 방법1과 동일한 압축파일을 다운로드 할 수 있다.
방법 3 : Shell 명령어 이용한 방식(Winodws cmd)
 powershell
 Invoke-WebRequest https://start.spring.io/starter.zip?dependencies=web,devtools"&"groupId=kr.or.connect"&"artifactId=book-server&"packageName=kr.or.connect"&"name=book-server -outFile book-server.zip
 Add-Type -A System.IO.Compression.FileSystem
 [IO.Compression.ZipFile]::ExtractToDirectory('book-server.zip', 'book-server')
4. 압축파일 풀기
 디렉토리 구조에서 workspace/book-app/book-server 디렉토리 아래에 pom.xml 파일이 오도록 압축해제
5. IDE로 import
 Eclispe에서는 File > Import > Maven > Existing Maven projects를 메뉴를 이용한다.
 Select an imoprt wizard 글자 아래에 있는 텍스트 입력차에서 바로 'maven'을 입력하면 해당 메뉴를 쉽게 탐색
6. 서버 실행
방법1 : IDE 안에서 실행 (서버모듈 코딩중 웹서버 실행 방법)
> @SpringBootApplication이 붙은 클래스의 main() 메서드를 실행
앞선 실습에서 groupId, artifactId를 그대로 썼다면, src/main/java/kr/or/connect/bookserver/BookServerApplication.java를 실행하면 된다. 
앞에서 의존성을 추가한 spring-boot-devtools에 의해 Java 파일이 컴파일/저장(Eclipse) 되면 서버가 자동으로 재시작된다.  
(Eclipse에서는 Project > Build Automatically가 선택되어 디폴트로 선택되어 있으므로 .java 파일을 Ctrl + S로 저장하면 자동으로 컴파일이 된다.)
c.f. Failure to transfer org.springframework.boot..., Could not find or load main class kr.or.connect.bookserver.BookServerApplication와 같은 에러가 Eclipse 안에서 난다면 프로젝트의 빌드가 제대로 되지 않은 것이다. 주로 네트워크가 좋지 않은 환경에서 의존하는 라이브러리가 완벽하게 다운로드되지 않았을 경우 그런 경우가 생길 수 있다.
    (조치)
	{유저홈 디렉토리}/.m2/repository 디렉토리를 전체 삭제
	Eclipse 의 Project > Clean 메뉴 실행
	book-server프로젝트를 닫았다 다시 열기. (프로젝트 이름에서 우클릭후 'Close Project'를 선택)
방법2 : Maven plugin 으로 실행(Java IDE를 실행하지 않고도 명령행에서 바로 서버를 실행, TML이나 JavaScript파일만을 Atom과 같은 별도의 에디터 사용시 활용)
 ./mvnw spring-boot:run (mvnw: Maven을 별도로 설치하지 않아도 쓸 수 있도록 해주는 Maven Wrapper의 실행 파일)
 start.spring.io를 통해 프로젝트를 생성했다면 Maven Wrapper를 포함한 압축 파일을 생성해준다. 
 Maven을 별도로 설치했다면 mvnw 대신 mvn으로 실행해도 된다.
 Stop: Ctrl + c
방법3 : jar 파일을 만들어서 실행
 Spring Boot는 어플리케이션 서버를 내장하고 있기 때문에 jar 파일 하나로 웹서버와 어플리케이션을 묶을 수도 있다. 
 즉 어플리케이션을 패키징한 jar파일을 실행하면 어플리케이션 서버까지 실행되는 것이다.
 Maven의 package phase를 실행하면 target 디렉토리 아래에 jar파일이 생성되고, 그 파일을 java -jar으로 바로 실행한다.
./mvnw package
cd target
java -jar book-server-0.0.1-SNAPSHOT.jar
 다른 장비에도 book-server-0.0.1-SNAPSHOT.jar 파일만 배포해서 실행하면, 별도의 서버 제품을 설치할 필요없이 웹 어플리케이션을 실행할 수 있다.
7. 웹페이지 확인: 웹브라우저로 http://localhost:8080 로 접근
*디버깅 : 이미 서버가 실행되었는데 다시 실행한 경우: 
에러 로그의 중간에는 java.net.BindException: Address already in use의 메시지도 찾을 수 있을 것이다.
이런 경우에는 기존에 실행했던 Spring Boot 프로레스가 있는지 확인하고 종료한다.
Console 탭에서  있는 아래쪽을 보는 삼각형을 클릭하면 실행된 프로세스를 확인할 수 있다.
8. 정적 파일 디렉토리 설정: Spring Boot에서 .html, js와 같은 정적 파일을 특정 디렉토리에서 참조할 수 있도록 설정
이런 구조는 프런트 엔드의 소스를 Eclipse 외의 다른 편집기에서 개발을 하는 경우에 유리
 book-server 프로젝트는 mvnw spring-boot:run으로 실행시켜 놓고, 
 book-client 프로젝트는 Atom과 같은 다른 에디터로 열어서 편집 가능 & 전문 프런트엔드 개발자가 투입되어서 Gulp/Grunt와 같은 프런트엔드 빌드도구를 도입하기에도 더 자연스러운 디렉토리 구성
 8.1. 정적 파일 설정 추가: book-server/src/main/resources/application.properties파일에 정적파일을 넣을 디렉토리를 상대 경로로 지정
      spring.resources.static-locations=file:../book-client/src/
 8.2. index.html 추가: book-client/src 아래에 index.html 파일을 추가
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Hello world</title>
  </head>
  <body>
    <h1>Hello!</h1>
  </body>
</html>
      application.properties의 설정을 따라 index.html과 같은 정적 파일은 Atom과 같은 별도의 에디터로 편집을 해도 즉시 웹서버에 반영된다.
 c.f. Eclipse로 book-client 프로젝트를 추가: Ctrl+n > Project > Location: workspace/book-app/book-client 
     (선택적)Working Sets항목을 지정해두면 나중에 book-server 프로젝트와 book-client 프로젝트만 따로 볼 때 편리하게 사용가능
 c.f. 이미 있는 프로젝트를 import : File > Import > General/Projects from Folder or Archive > Directory: book-client > Finish
 8.3. 서버 실행 & 확인: Spring Boot 어플리케이션을 실행하고 http://localhost:8080 으로 접근해서 위의 index.html 파일이 나오는지 확인
c.f. 정적 파일의 위치 지정 방식: application.properties에 지정하는 경우, jar파일로 패키징하면 깨짐
    정적 파일의 위치를 프로그램 매개변수로 지정하기: 
    방법1. spring.resources.static-locations 값은 프로그램 매개변수로도 지정
	java -jar book-server-0.0.1-SNAPSHOT.jar  --spring.resources.static-locations=file:/home/benelog/deploy/book-client/src/
    방법2. jar파일 안에 함께 정적 파일 포함시키기
 	book-server/src/main/resources/static 폴더 아래에 정적 파일 위치
	다만, 이 위치에 있는 정적 파일은 개발을 할때는 Eclipse 밖에서 수정을 했을 때 서버에 바로 반영되지 않는다. 
	jar파일 안에 들어가는 classpath에서 읽어오는 정적파일은 book-server/target/classes/static 아래로 복사되어야 인식이 되기 때문이다. Eclipse에서는 src/main/resources/static 아래의 파일을 수정하면 자동으로 target/classes/static으로 복사해 준다.

[Back-end 개발]
1. Controller(웹요청처리: 요청이 들어오는 URL 주소와 이를 처리할 Controller 클래스의 메서드를 연결) 추가 - presentation 패키지
   사용할 Spring MVC의 어노테이션: @RestController, @GetMapping

실습D05: ApplicationContext(에) 도입 (하기 위해 BookLauncher class에 @추가)
앞선 실십의 Dependency injection을 Spring의 기능을 이용하는 방식으로 바꾸어본다. DataSource를 생성하는 역할을 Spring에서 제공하는 ApplicationContext에 맡긴다.
Spring framework을 쓰지 않는다면 AppConfig와 같이 어플리케이션에서 자주 참조되는 객체를 생성하는 클래스를 따로 만들고 이를 직접 호출하는 방식으로 객체간의 의존성을 관리할 수도 있다. Spring의 ApplicationContext를 도입했을 때의 장점은 아래와 같다.

직접 의존성 관리 대상 객체를 생성하는 메서드를 추가할 필요 없이 패키지 범위를 지정하여 일괄 등록할 수 있다. ( component scan 기능)
객체 간의 의존관계가 여러 단계로 얽혀있을 때 이를 더 효율적으로 관리할 수 있다.
예를 들면 BookController 객체는 BookService 객체를 주입받고, BookService 객체는 BookDao 객체를 주입받는 경우이다.
Spring이 관리하는 객체에 공통적인 기능을 일괄적으로 집어 넣을 수 있다. 예를 들면 로깅, 트랜잭션 시작과 종료, 예외 변환, 메서드 접근 통제 등이다. 이런 기법을 AOP(Aspect Oriented Proramming)이라고 한다.
객체가 참조할 속성이지만 환경마다 달라지는 값을 별도의 속성파일로 추출하여 설정할 수 있다. 예를 들면 데이터베이스의 접속 주소 같은 것들이다.
어플리케이션 시작 혹은 종료 시에 실행되어야 할 메서드를 호출한다. 예를 들면 @Bean선언 등으로 관리되는 객체가 java.lang,AutoCloseable을 구현한 클래스라면 ConfigurableApplicationContext.close()이 호출되는 시점에 일괄적으로 해당 bean 클래스의 close() 메서드가 호출된다.
위의 장점 중 일부는 이 과정의 나머지 부분에서 드러날 것이다.

참고로, Spring MVC로 만든 웹어플리케이션에서 직접적으로 ApplicationContext을 호출할 일은 많지는 않다. Spring MVC는 URL 요청을 Controller의 메서드로 연결해주고, Controller에 의존하는 클래스들은 멤버변수로 이미 주입된 상태로 쓰기 때문이다. 이후의 REST API개발 실습에서 이를 확인할 수 있다.
그러나 에러 로그를 확인하고 문제가 생겼을 때 원인을 파악하기 위해서는 ApplicationContext의 존재와 역할을 이해해야한다.

실습D06: Component scan 도입 (ApplicationContext에 BookDao class 등록하고, AppConfig에서 Context를 설정하여 Context에서 BookDao를 가져와서 BookLauncher에서 사용)
Spring에서 제공하는 'component scan'기능을 이용하면 특정 패키지에 있는 클래스를 일괄적으로 bean으로 등록할 수 있다. 
- 자동: BookDao의 생성자에 DataSource 객체를 넘겨서 주입하는 과정
         BookDao를 @Bean 애너테이션을 이용해서 등록하는 과정
BookDao를 Component scan을 이용해서 스프링에서 관리하는 bean으로 등록해 보겠다.
*@Repository > @ComponentScan(BookDao에서 생성자?마다 @Bean으로 등록할 필요 없음) > context 호출

실습D07: 속성 관리 도입 (ApplicationContext 활용 장점)
DB의 주소, ID, 비밀번호 등은 개발, 운영 등 환경에 따라 달라지기 때문에 보통 별도의 파일로 빼서 관리를 한다. 
이번 실습에서는 그런 DB 접속 정보를 별도의 properties 파일로 분리해 본다. 
이렇게 별도의 파일로 선언된 속성을 자바 객체에 주입할 수 있는 기능은 Spring의 ApplicationContext를 활용함으로서 생기는 장점 중의 하나이다.
@PropertySource 선언 (AppConfig.class): 프로퍼티 파일 속성 읽도록 적용
@Value로 DB커넥션하는 클래스 내에서 사용

실습D08: 1건 조회
book 테이블을 id값으로 조회하는 쿼리를 실행하고 결과를 RowMapper를 이용해서 원하는 객체로 변환
- NamedParameterJdbcTempate.queryForObject(String, Map, RowMapper) 활용하고, RowMapper구현
방법: book 테이블의 컬럼과 동일한 속성을 가지는 Book 클래스를 만든다.
       DB에서 book 테이블에서 특정와 id가 일치하는 건을 반환하는 쿼리를 작성하고 Book 클래스를 반환하는 BookDao.selectById(Integer)메서드 안에서 호출하도록 구현한다.
c.f. RowMapper 정의한 람다표현식 ( (rs, i) -> {})을 클래스로 표현시,
RowMapper<Book> rowMapper = new RowMapper<Book>() {
	@Override
	public Book mapRow(ResultSet rs, int i) throws SQLException {
                Book book = new Book();
		book.setId(rs.getInt("id"));
		book.setTitle(rs.getString("title"));
		book.setAuthor(rs.getString("author"));
		book.setPages((Integer) rs.getObject("pages"));
		return book;
	}
};

실습D09. BeanPropertyRowMapper 활용
RowMapper 인터페이스에 맞춰서 ResutSet에서 Book 객체로 변환을 하는 코드를 직접 작성했었다. 
이번 실습에서는 같은 변환을 더 간편하게 처리할 수 있는 BeanPropertyRowMapper을 활용
: BookDao.selectById()에서 BeanPropertyRowMapper을 써서 쿼리 결과를 Book객체로 변환
  BeanPropertyRowMapper.newInstance() 메서드를 이용해서 Book 클래스와 대응되는 RowMapper 인스턴스를 생성
- BookDao에서 람다표현식으로 정의한 RowMapper 삭제하고 BeanPropertyRowMapper로 RowMapper를 정의
*BeanPropertyRowMapper.newInstance()로 생성한 객체는 멀티스레드에서 접근해도 안전하기 때문에 아래와 같이 멤버 변수로 선언하고 바로 초기화를 해도 무방하다.

실습D10: SimpleJdbcInsert 활용 ( INSERT 구문 직접 SQL을 작성하지 않고 Spring JDBC의 SimpleJdbcInsert를 이용해서 INSERT 구문을 자동생성해서 실행)
- BookDao.insert(Book) 메서드로 book테이블에 데이터를 입력하는 기능을 구현
  : Spring JDBC의 SimpleJdbcInsert, BeanPropertySqlParameterSource (이 과정의 'DB 입출력 : Spring JDBC' 장을 참고)
1. BookDao의 멤버변수에 SimpleJdbcInsert 추가: BookDao의 생성자에서 SimpleJdbcInsert객체를 생성
2. BookDao.insert(Book) 메서드 구현
*실무에서는 관례적으로 DB에 저장되는 값은 원시타입인 int대신 java.lang.Integer를 쓰는 경우가 많다. 거기에 맞춰서 insert()메서드의 반환형도 Integer로 해보았다. DAO의 메서드에서는 실행된 쿼리가 영향을 준 데이터 건수를 int로 반환하는 경우도 많기 때문에, 그런 경우와 구분을 하는데에도 이 관례가 도움이 된다.

실습D11: 통합 테스트: OK
BookLauncher 클래스 안에서 BookDao를 호출하는 방식으로 테스트 -> 코드확장 -> 테스트를 쪼개어서 관리:JUnit
: BookDaoTest에서 ApplicationContxt를 로딩 (@RunWith, @ContextConfiguration, @Autowired)
1. BookDaoTest추가

실습D12: 통합 테스트에서 트랜잭션 롤백 - DB의 트랜잭션을 이용해 테스트데이터 삭제
테스트 시작 전에 트랜잭션을 시작하고, 종료 전에 롤백을 시킨다면 테스트 도중에 만든 데이터는 없어진다.
:Spring에서는 이와 같이 트랜잭션을 이용해 테스트 실행 중이 이루어진 DB 조작을 취소하는 기능을 제공한다. 이를 실습에서 이를 활용
1. PlatformTransactionManager 등록: AppConfig.java에서 PlatformTransactionManager를 bean으로 등록
   -DataSourceTransactionManager를 구현체로 사용

실습D13: DELETE 쿼리 실행 - book 테이블에 id로 지정된 1건을 삭제
BookDao.delete() 메서드 추가
BookDaoTest 클래스에 테스트 메서드 shouldDelete() 추가


[실습W02]: 목록/상세 조회 API를 REST 스타일로 구현
REST 스타일의 주소를 코드로 표현해본다.
- 응답값: JSON으로 변환(우선은 고정된 값을 반환하도록 데이터 조회 로직을 구성)
REST API는 API를 사용할 클라이언트와 동시에 개발되는 경우가 많다. 
c.f. REST API 개발이 끝난 후에 클라인트 개발이 순차적으로 진행되지 않고 다른 부서의 사람이 클라언트 개발을 하지 않은 상황도 흔하다.
    따라서 완벽한 구현을 하기 전에 API의 스펙을 먼저 정해서 API를 소비하는 개발자에게 공유해야 할 수도 있다. 
    DB에 연동하는 구현을 하기 전에 약속된 스펙에 따라 응답을 해주는 테스트용 서버를 제공하기도 한다.
    이번 실습은 다른 담당자에게 API 스펙을 우선 공유하기 위해 테스트용 API 서버를 제공하는 상황과도 유사하다. 
    혼자서 개발을 할 때도 API 스펙에 대한 확신이 없다면 우선은 이번 실습과 같은 간단한 서버 구현만 한 뒤에 클라이언트 코드를 만들어볼수 있다. 
    개발을 진행하면서 API가 갖춰야할 스펙에 확신이 가는 시점에 DB 연동 로직을 추가한다면 시행착오를 겪는 시간을 더 줄일 수도 있다.

전형적인 스프링 어플리케이션에서는 @Controller가 붙은 클래스 -> @Service가 붙은 클래스 -> @Repository가 붙은 클래스로 요청의 흐름이 이어진다.
이렇게 component scan의 대상을 지정하는 애너테이션을 구분해서 사용하면 레이어별 역할에 따라서 공통 정책을 정의하기에 용이하다. 예를 든다면 @Repository가 붙은 클래스에서 다른 프레임워크에 특화된 Exception을 던지면 Spring의 DataAccessExceptoin으로 변환하는 기능을 추가하는 경우이다.

Controller에서 Service를 참조할 때도 보통 Spring의 Dependency injection을 이용해서 객체 간의 관계를 구성한다. 
이런 구조는 Service 객체에 일괄적으로 공통 기능을 넣을 수 있는 가능성을 남겨두고 테스트 코드를 만들 때 Service 객체를 테스트용 가짜 객체로 갈아끼우기에도 유리해지는 장점이 있다.
c.f. Spring framework 4.3 버전 이후부터는 생성자가 1개인 클래스에서는 @Autowired를 생략할 수 있다.

*의존성문제로 인한 에러 (pom.xml에서 버전정보 다 지워서 해결)
Exception in thread "restartedMain" java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.lang.AbstractMethodError: org.springframework.boot.context.config.ConfigFileApplicationListener.supportsSourceType(Ljava/lang/Class;)Z
	at org.springframework.context.event.GenericApplicationListenerAdapter.supportsSourceType(GenericApplicationListenerAdapter.java:79)
	at org.springframework.context.event.AbstractApplicationEventMulticaster.supportsEvent(AbstractApplicationEventMulticaster.java:282)
	at org.springframework.context.event.AbstractApplicationEventMulticaster.retrieveApplicationListeners(AbstractApplicationEventMulticaster.java:214)
	at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:185)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:75)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54)
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:347)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:306)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at kr.or.connect.bookserver.BookServerApplication.main(BookServerApplication.java:10)
	... 5 more

실습W03: 입력 API (Service, Controller에)
데이터를 생성하는 API에서 REST 스타일을 특징을 이해한다. Spring MVC로 입력 API를 구현하고 테스트하는 방법을 익한다.
REST API를 개발하는 과정에서 생기는 버그는 해결 비용이 비싼 경우가 많다. API의 버그인지, 클라언트의 버그인지 확인을 하는데 시간이 많이 가기도 한다. 다른 사람/다른 부서와 협업으로 디버깅을 진행해야 하는 상황도 있다. 따라서 REST API를 개발할 때는 어떤 단계에서든 자동화된 테스트를 만드는 것이 궁극적인 생산성에 도움이 된다.
REST API를 테스트하는 기법도 다양하다. 개발 서버 장비에 어플리케이션을 배포한 후에 해당 서버를 호출하는 HTTP 클라이언트 코드로 테스트를 할 수도 있다. Spring의 MockMvc를 이용한 테스트는 Spring MVC에만 특화된 테스트 기법이다. 이 기법을 이용하면 테스트를 위해 다른 장비에 어플리케이션을 배포하거나 웹서버를 실행하지 않아도 된다. API 구현코드를 작성한 직후에 빠르게 검증을 할 수 있다는 장점이 있다.

/api/books에 POST 메소드로 요청을 받는 입력 API를 구현한다.
API 명세를 테스트 코드로 검증한다. (Spring의 MockMvc 클래스를 활용)
Book 데이터는 BookService에서 ConcurrentHashMap에 저장한다.
Spring MVC의 아래의 애너테이션을 활용한다.(@PostMapping, @RequestBody, @ResponseStatus)

1. BookService에 입력 로직 추가: BookService의 메모리에 Book객체를 저장하는 로직
2. API 테스트 코드 추가
- pom.xml에 json-path 의존성 추가
- BookControllerTest 추가: src/test/java 폴더에 kr.or.connect.bookserver.presentation 패키지에, import 주의
  *Spring의 MockMvc 클래스는 HTTP 요청을 테스트하기에 편리한 기능을 제공한다. 테스트 코드에서 HTTP 요청의 주소와 메서드를 지정하고 응답의 내용, 상태 코드등을 검증하는 방식으로 테스트할 수 있다. 이를 통해 Controller에 선언한 애노테이션이 적절한지 검증하기에 좋다. MockMvc 를 이용한 테스트 코드에서는 요청 주소, 메서드, 응답 코드 등의 스펙이 잘 드러나기 때문에 REST API를 테스트하고 명세화하기에도 적합하다.
3. Controller에 create 메서드 추가
HTTP 메서드 중 POST를 받을 것이므로, @PostMapping를 사용할 것이다. 이미 클래스 레벨에서 /api/books에 대한 주소를 받는다고 이전 실습에서 선언을 했었다. 따라서 입력 메서드에서는 추가적인 U경로를 지정할 필요없이 @PostMapping만 단순히 붙이면 된다.
입력 요청의 파라미터는 요청 본문으로 받고 다시 JSON으로 입력된 Book객체를 반환한다. 따라서 요청을 처리할 메서드는 Book create(@RequestBody Book book)와 같이 선언한다.
응답코드는 CREATED이므로 이에 해당하는 @ResponseStatus(HttpStatus.CREATED)를 Controller에서 입력 요청을 처리하는 메서드 앞에 붙인다.
4. 실행 확인
- postman/curl을 이용한 테스트: OK
- jUnit 테스트: 왜 컨텍스트 에러가 날까,,,,,,,,,,

실습W04: 수정, 삭제 API 개발 (Service:메모리 접근, Controller:URL분류)
/api/books/{id}의 경로에 REST 스타일로 수정, 삭제 API를 구현 (data는 ConcurrentHashMap에 저장)
1. BookService에 수정, 삭제 로직 추가: 메모리에 Book객체를 수정 저장하는 로직
2. BookControllerTest에 Update, Delete에 대한 테스트를 추가
3. Controller에 update, delete 메서드 추가: @PutMapping(""), @DeleteMapping("")

실습W05: DAO 결합하기
1. DB 속성 복사
2. pom.xml에 spring-boot-starter-jdbc와 h2에 대한 의존성 추가
의존성을 추가한 이후에는 BookServerApplication를 다시 재시작한다. .java 파일을 수정한 경우는 spring-boot-devtools에 의해 어플리케이션이 자동으로 재시작되었었다. 그러나 pom.xml에서 의존성 선언이 추가된 경우는 재시작없이는 변경사항이 반영되지 않는다.
해당 모듈의 버전은 <parent> 태그에 설정된 spring-boot-starter-parent에 의해 지정되고 있기 때문에 별도로 명시할 필요가 없다.
실습D02에서는 spring-jdbc에 대한 의존성을 추가했었다. 이 실습에서 추가한 spring-boot-starter-jdbc는 spring-jdbc를 포함하고 있다. 그 외 커넥션풀 라이브러리인 tomcat-jdbc도 들어가 있다.
이런 의존성은 명령행에서 'mvn dependency:tree' goal을 실행해서 확인할 수 있다.
또는 Eclipse에서 pom.xml을 연 후 Dependency Hierachy 탭에서도 이렇게 연쇄적으로 의존성이 추가되는 라이브러리를 확인할 수 있다.
3. BookDao 복사
실습D14에서 완성한 BookDao를 복사한다. book-server/src/main/java/kr/or/connect/persistence 폴더 아래로 BookDao.java파일을 복사한다.
Eclipse 내부에서 바로 복사하려면, 다음과 같이 한다.
book-server/src/main/java 디렉토리 위에 커서를 놓고 Ctrl +v를 누른다. 
4. BookDaoTest 복사
마찬가지로 BookDaoTest도 book-server/src/test/java/kr/or/connect/persistence 폴더로 복사한다. 기존의 코드 중 AppConfig.class를 의존하는 부분에서 에러가 날 것이다.
이 부분을 아래와 같이 @SpringBootTest로 바꾼다. 이를 통해 Spring Boot 통해 설정한 ApplicationContext에서 BookDao를 참조할 수 있다.
BookDaoTest를 실행해서 모든 테스트가 통과하는지 확인을 한다.

AppConfig에 있던 아래 요소들이 모두 Spring Boot에 의해 자동으로 처리되었기 때문에 AppConfig 설정을 복사할 필요가 없다.

@ComponentScan 선언
@PropertSource 선언으로 application.properties에 있던 속성을 값을 읽어오기
dataSource에 application.properties에 있던 속성을 주입하고 @Bean
transactionManager를 @Bean 으로 등록

5. BookDao.selectAll() 메서드를 추가하고 검증
book에 모든 데이터를 조회하는 SQL 쿼리를 BookDAO에 상수로 추가한다.
6. BookSerivce에서 BookDao를 참조하여 호출
BookSerivce에서 BookDao를 주입받는다. ConcurrentMap으로 했던 구현을 BookDao를 호출하는것으로 수정한다.
7. 로깅 추가
BookController의 멤버변수로 org.slf4j.Logger의 인스턴스를 추가한다.
Logger와 LoggerFactory는 같은 클래스 이름이 많다. 아래와 같이 org.slf4j 패키지가 선택되도록 주의한다.
8. BookControllerTest를 실행해서 검증
BookControllerTest 를 실행한다. 이 테스트 클래스에서도 마찬가지로 Spring Boot 방식의 설정을 읽어올수 있도록 @SpringBootTest를 붙인다.
9. 서버 실행 후 테스트
BookServerApplication클래스를 실행하고 curl 등으로 REST API를 호출해본다. 실습D01에서 한대로 H2 Console을 이용해서 실제로 DB에 값이 입력되었는지도 확인해본다.
웹브라우져로 http://localhost:8080/api/books 를 호출하면 방금 입력한 데이터가 포함되어서 나온다.
H2 Console로 들어가서 쿼리를 실행해봐서도 동일한 데이터가 나오는 것을 확인한다.

이제 book 클래스에 대한 REST API는 완성되었다. Front end 강의에서 학습한 지식을 바탕으로 지금까지 개발한 REST API를 JavaScript 클라이언트에서 호출해서 UI를 만들 수 있다.
