NPM(Node Package Manger): node.js를 설치하면 동시에 설치됩니다. 
 package: node.js의 library

[NPM명령어]
$npm init : 현재 폴더에 package.json파일(node 프로젝트에 대한 설명을 json으로 저장) 생성
 -  package.json: dependency package(해당 프로젝트를 실행하기 위해 설치되어야 하는 package들) 목록 기록
 - node.js 프로젝트 개요 입력
$npm install --save [package 이름] :현재폴더\node_modules 에 해당 package를 다운로드
 - --save 옵션: 다운로드를 하는 동시에 package.json에 등록(옵션안주면 다운로드만 됨)
$npm install :특정 package 이름을 입력하지 않으면 package.json 파일 안에 기록된 모든 dependency package들을 설치
 - 프로젝트 코드를 복붙하는 경우, 실행을 위해 코드에서 사용하는 패키지를 다운받을 때 사용

-------------------------------------------------------------------------------------------------------------------------------
HTTP Methods 는 HTTP Verbs 라고도 불리는데, HTTP 신호의 타입들을 분류해 놓은 것입니다.
HTTP Methods 는 종류가 광장히 많지만 그 중에 자주 쓰이는 GET, POST, PUT, PATCH, DELETE를 알아봅시다.

아래 내용에서 resource는 웝페이지(html), binary data(그림파일, 소리파일 등), db data(json/xml/혹은 html로 render된 data)를 뜻합니다.

GET
서버에게 resource를 보내달라고 요청합니다. 서버(혹은 DB)의 resource는 클라이언트로 전달만 될 뿐 변경되지 않습니다.
예를 들어 웹브라우저에http://example.com/exmaple.png를 입력하면 해당 그림 파일이 표시되고, http://example.com/something을 입력하면 서버가 해당 route에 표시되어야 하는 페이지를 찾아 보여줍니다. 참고로 웹브라우저 주소창에 주소를 입력하면 이 신호는 항상 get으로 요청됩니다.

POST
서버에게 resource를 보내면서 생성해 달라고 요청합니다. 예를들어 회원가입을 하면 DB에 새로운 회원정보가 등록되고, 사진을 업로드 하면 그 사진이 웹사이트에 등록됩니다.

PUT
서버에게 resource의 업데이트 하거나 resource가 없다면 새로운 resource를 생성해 달라고 요청합니다. 회원정보 수정 등에 사용됩니다.
PUT은 PATCH와 비교해서 전체 데이터를 교체하는 차이점이 있습니다.
가령 user data의 구조가 user._id, user.firstName, user.lastName, user.age라고 한다면, 회원정보 수정시 PUT은 _id를 찾아 age만 업데이트하더라도 항상 모든 필드값을 가져와서 모든 필드를 항상 새로운 값으로 교체합니다.

PATCH
서버에게resource의 업데이트를 요청합니다. 회원정보 수정 등에 사용됩니다.
PATCH는 PUT과 비교해서 부분 데이터를 업데이트하는 차이점이 있습니다.
가령 user data의 구조가 user._id, user.firstName, user.lastName, user.age라고 한다면, 회원정보 수정시 PATCH는 _id를 찾아 age만 업데이트할때 _id와 age만 받아와서해당 부분을 업데이트 합니다.

PUT는 대상의 전체를 수정하고, PATCH는 대상의 일부분을 수정합니다. 사실 PATCH는 PATCH를 만든 사람의 의도대로 사용하려면 너무 복잡하기 때문에 요즘은 대부분 PUT으로 처리합니다. 회원 정보 수정 form을 예로 들면 일부분만 수정하더라도 submit하면 일단 form의 모든 정보가 전송되잖아요? 그럼 PUT이 되는 것이죠.
DB를 부분적으로 수정하기 때문에 효율적이라고 말씀하시는 건가요? 사실 이정도 차이로 속도의 차이를 느끼기는 어렵습니다. 

DELETE
서버에게 resource의 삭제를 요청합니다.
----------------------------------------------------------------------------------------------------------------------------
Static Site
정적 사이트는 페이지 내용이 항상 일정합니다. 요즘은 100% 정적 사이트는 찾기가 힘들고 동적사이트에서 일부만 static page로 구성해서 사용하는 경우가 많습니다.

회사 소개 사이트에서 CEO 인사말, 기업 가치 등등 잘 변하지 않는 페이지들이 static page일 수도 있습니다.

하나의 html 파일이 언제나 동일한 내용을 가지는 사이트(물론 관리자에 의해 html 파일이 변경되는 경우는 제외)
 웹사이트의 route 구조가 파일 디렉토리 구조와 동일
 파일들이 접근 제한이 없음(public)
Dynamic Site
동적 사이트, 혹은 다이나믹 사이트(그외 동적/다이나믹 웹, 동적/다이나믹 홈페이지 등등등)라고 불리는 데, dynamic은 '역동적'이라는 뜻을 가지고 있습니다. 즉, 항상 일정하지 않고 변한다는 뜻입니다.

뉴스사이트, 포털 사이트, SNS 등이 여기에 해당됩니다. SNS에 글을 올리면 페이지 내용이 변하죠.

웹사이트의 모든 것이 100% dynamic해야 하는 것은 아니고 정적인 사이트에 동적인 부분이 추가되면 dynamic site입니다.

(이미지 파일, CSS파일, JS파일등 resource파일들은 정적 폴더에 저장되죠.)

 하나의 template(html일수도 있고 다른 파일일 수도 있음)이 여러개의 컨텐츠를 나타낼 수 있는 사이트
 웹사이트의 route를 제작자가 직접 개별 파일에 연결할 수 있음
 router를 통해 개별 파일에 접근 제한을 할 수 있음
-----------------------------------------------------------------------Spring으로 구축완료(아래는 express웹서버 구축, 참고)
Express는 node.js로 서버를 만드는 framework입니다. node.js와 Express를 사용해서 초간단 웹서버를 만들어 봅시다.
 Express는 npm package 입니다.
설치한 package들은 현재폴더/node_modules에 저장됩니다.

-app.HTTP method('route', 함수, 함수, 함수...)의 구조를 하고 있습니다.

위에서는 함수를 하나만 사용했지만 함수사이에 ","를 넣어서 여러개의 함수를 넣을 수도 있습니다.

함수에는 req, res, next의 parameter들(이 순서만 중요할 뿐 이름은 바꿔도 상관없습니다)이 자동으로 전달됩니다.

req
request에 관련된 값들과 함수들이 저장되어 있는 object.
HTTP request header, 요청 url, cookies, query, body 등의 정보가 저장되어 있습니다.
이 object의 전체 구조를 확인하고 싶을땐 console.log(req)를 이용해서 안을 확인해 보세요.

res
response에 관련된 값들과 함수들이 저장되어 있는 object.
HTTP response header, cookies, HTTP code 등의 정보를 확인하고 값을 변경할 수도 있습니다.
또한 어떠한 방식으로 response할지도 정할 수 있습니다. 위 예제에서는 res.send를 사용해서 텍스트를 response하였습니다.
이 object의 전체 구조를 확인하고 싶을땐 console.log(res)를 이용해서 안을 확인해 보세요.

next
다음번 함수를 호출 하는 함수입니다. next()를 사용하면 다음 함수로 이동합니다. 위 예제에서는 함수가 하나뿐이므로 parameter에 적지도 않았습니다.

$node index.js : express 서버 실행
----------------------------------------------------------------------------------------express에 static페이지 구축
-app.use는 HTTP method에 상관없이 무조건 실행되는 부분입니다.
express.static를 사용해 static폴더를 지정하였습니다.
__dirname은 node.js에서 프로그램이 실행중인 파일의 위치를 나타내는 global variable입니다.
즉 app.use(express.static(__dirname + '/public'))는 현재위치/public을 static폴더로 지정하는 명령어입니다.
// spring boot에서는 application.properties에 경로 설정
static폴더가 설정되면 웹사이트 경로가 static 폴더에 연결됩니다.
'/'에 접속하면 '/public'에, '/css'에 접속하면 '/public/css'에 접속하게 됩니다.
static폴더에서 특별히 파일 이름을 지정해 주지 않으면 자동으로 index.html을 찾게 됩니다.
즉 '/'에 접속하면 '/index.html'을 보여줍니다. '/index.html'입력한 것과 같은 결과를 보여줍니다.
----------------------------------------------------------------------------------------EJS로 Dynamic Website 만들기
/hello route을 추가하고 query, route parameters로 이름을 입력받아 인사말을 출력하는 페이지를 추가합니다.

EJS는 Embedded Javascript의 약자로 Express에서 dynamic website를 만들기 위해
 template으로 사용되는 파일(확장자 이름은 .ejs)입니다.
-----------------------------------------------------------------------------------------------express 안쓰니깐 생략

[[angular.js]]
라이브러리: 제이쿼리와 같은 웹 애플리케이션을 개발할 때 유용한 함수의 집합이다. 여러분이 작성한 코드가 필요 시점에 이 함수를 직접 호출하고 애플리케이션 전체 흐름을 제어한다.
프레임워크: 웹 애플리케이션의 특정 구현체다. 여러분이 작성한 코드가 상세 구현으로 프레임워크의 빈 부분을 채운다. 프레임워크가 여러분이 작성한 코드를 필요 시점에 호출하고 애플리케이션 전체 흐름을 제어한다. AngularJS와 더불어 knockout.js와 ember.js도 프레임워크라 하겠다.
지금까지 HTML, 자바스크립트, CSS만으로는 화려하고 편리한 사용자 인터페이스를 제공하는 웹 애플리케이션을 개발하기 매우 어려웠다. 그래서 ActiveX와 플래시와 같은 기술에 의존하여 리치rich한 웹 애플리케이션을 개발했다. AngularJS는 이러한 리치 웹 애플리케이션을 위해 만들어지지 않은 HTML의 부족한 부분을 채우고자 만들어졌다. 다음은 AngularJS가 제공하는 주요 기능이다.

템플릿
양방향 데이터 바인딩
MVC 구조
지시자directive를 이용한 HTML 확장
의존관계 주입Dependency Injection
단일 페이지 웹 애플리케이션을 위한 라우터Router
$q를 이용한 자바스크립트 비동기 프로그래밍 지원
자바스크립트 테스팅 지원
CSS3 Animation 처리 지원
모바일 터치 이벤트 지원

실제로 Angular는 프론트 엔드의 프레임워크이다. 스프링은 서버를 다룬다.
결국 Angular와 spring의 연동이라는 것은 스프링으로 짜여진 서버에 페이지를 요청했을때에
Angular로 빌드된 SPA를 응답한다는 의미이다. 

1. 먼저 Angular cli가 있어야 한다.
Angular cli 는 개발자가 Angular 개발에만 집중할 수 있도록 지원해주는 아주아주 편리한 도구라고 생각하면 되겠다.
앵귤러를 쓰려는 분들은 기본적으로 node.js 와 npm이 깔려있다는 전제하에 바로 소개하겠다

$ npm install -g angular-cli
를 통해 전역으로 설치하여준다. 이 도구가 설치되면 터미널에서 ng 명령어를 사용할수 있게된다.

2. 프로젝트 생성
앞서 이야기하였듯이 이제는 ng 명령어를 사용할 수가 있다. 이걸 이용해서 프로젝트를 생성한다.
$ ng new 프로젝트이름
//테스트를 해본답시고 프로젝트 이름을 Test로 작성하게 되면 저렇게 사용할수 없다는 오류가 발생하니 참고.
프로젝트를 생성하면 다음과 같이 개발에 필요한 것들을 알아서 설치하여 준다.
$ng serve
명령어를 실행하면 이 도구에서 자체 제공하는 개발서버가 실행
3번째 줄을 보면 알 수 있듯이, 4200번 포트로 서버에 접근할 수 있다.
http://localhost:4200
브라우저를 통해 들어가면 헬로~ 라는 문구가 뜨며 서버가 잘 개통 됨을 알 수 있을 것이다.

3. 스프링과의 연동 
우리가 만든 프로젝트를 이용해서 구현하고자 하는 바를 다 이루었다면 이제는 스프링 프로젝트와 함께 서버에 올리고 싶을 것이다.
$ng bulid 
명령어이다. angular - cli 로 만들어진 프로젝트의 코드는 타입스크립트 기반이기때문에
빌드과정을 거쳐 브라우저에서 동작 가능한 자바스크립트로 변경해주어야 한다.
저 명령어를 사용해주면 dist라는 폴더가 만들어지면서 배포가능한 형태로 변환되어지는데
안에는 index.html 과 함께 잡다한 소스파일들이 들어있다.
스프링에서도 처음로드 할때 실행하고자 하는 인덱스파일이 있을것이다.
로드하려는 경로에다가 dist 폴더안 파일을 죄다 긁어다 복사하고 붙여넣고 스프링을 실행해보자.
스프링으로 만들어진 프로젝트는 로드되자마자 index 파일을 찾게 될 것이다.

index 파일은 자연스럽게 빌드된 환경에 있는 자원들을 이용해 클라이언트에게 전달된다.
SPA이기 때문에 한번만 전송하면 끝!

나도 이번에 알았는데 Angular는 SPA (Single Page Application)에 최적화된 프레임워크라고 한다.
한장으로 이루어진 어플리케이션이어서 페이지의 이동이 아닌 Restful 한 데이터 송수신을 통해 동적인 화면을 만들어 낸다는 것이다.

-----------------------------------------------------------흠 SPA를 개발할게 아닌뎁(원페이지에 데이터송수신으로 동적화면제공)
JSP+bootstrap?
vue.js